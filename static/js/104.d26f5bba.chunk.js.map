{"version":3,"file":"static/js/104.d26f5bba.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","helpers/genreList.js","helpers/normalization-obj.js","services/api-service.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n\tpadding: 20px;\n`;\n\nexport const ListCost = styled.ul`\n\tdisplay: flex;\n\talign-items: center;\n\tflex-wrap: wrap;\n\tgap: 30px 15px;\n`;\nexport const ItemCost = styled.li`\n\twidth: 100%;\n\theight: 400px;\n\tflex-basis: calc(100% / 4 - 15px);\n\tpadding: 5px;\n\tcolor: var(--font-color);\n\tbackground: #fbf9fa3f;\n\t/* font-size: 16px; */\n\tborder-radius: 5px;\n\n\t& img {\n\t\twidth: 100%;\n\t\tmax-height: 300px;\n\t\tobject-fit: cover;\n\t}\n`;\n\nexport const Data = styled.p`\n\tmargin-top: 10px;\n\tfont-size: 14px;\n\tfont-weight: 600;\n`;\n","import { ListCost, Container, ItemCost, Data } from './Cast.styled';\nimport { useState, useEffect } from 'react';\nimport { getImgPath } from '../../helpers/normalization-obj';\nimport { useParams } from 'react-router';\nimport { fetchMoviesCredits } from '../../services/api-service';\n\nconst Cast = () => {\n\tconst [credits, setCredits] = useState([]);\n\tconst { movieId } = useParams();\n\n\tuseEffect(() => {\n\t\tconst getCast = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await fetchMoviesCredits(Number(movieId));\n\t\t\t\tconsole.log(response);\n\t\t\t\tsetCredits(response);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error.message);\n\t\t\t}\n\t\t};\n\t\tgetCast();\n\t}, [movieId]);\n\n\treturn (\n\t\t<Container>\n\t\t\t{credits.length !== 0 ? (\n\t\t\t\t<ListCost>\n\t\t\t\t\t{credits &&\n\t\t\t\t\t\tcredits.map(({ name, profile_path, character, id }) => {\n\t\t\t\t\t\t\tconst img = getImgPath(profile_path);\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ItemCost key={id}>\n\t\t\t\t\t\t\t\t\t<img src={img} alt={name} />\n\t\t\t\t\t\t\t\t\t<Data>{name}</Data>\n\t\t\t\t\t\t\t\t\t<Data>Character: {character} </Data>\n\t\t\t\t\t\t\t\t</ItemCost>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t</ListCost>\n\t\t\t) : (\n\t\t\t\t<Data>\n\t\t\t\t\tWe have no information about the actors of this movie\n\t\t\t\t</Data>\n\t\t\t)}\n\t\t</Container>\n\t);\n};\n\nexport default Cast;\n","export const obj = {\n  28: \"Action\",\n  12: \"Adventure\",\n  16: \"Animation\",\n  35: \"Comedy\",\n  80: \"Crime\",\n  99: \"Documentary\",\n  18: \"Drama\",\n  10751: \"Family\",\n  14: \"Fantasy\",\n  36: \"History\",\n  27: \"Horror\",\n  10402: \"Music\",\n  9648: \"Mystery\",\n  10749: \"Romance\",\n  878: \"Science Fiction\",\n  10770: \"TV Movie\",\n  53: \"Thriller\",\n  10752: \"War\",\n  37: \"Western\",\n};\n\nexport default obj;","import genreList from './genreList';\nimport noImg from '../images/No_image_available.png';\n\nconst getGenreArray = genre_ids =>\n\tgenre_ids.map(el => genreList[`${el}`]).join(', ');\nconst getGenreArrayLibrary = genres => genres.map(el => el.name).join(', ');\n\nexport const getImgPath = imgPath =>\n\t!imgPath ? `${noImg}` : `https://image.tmdb.org/t/p/w500/${imgPath}`;\n\nconst getDate = date => (!date ? date : date.slice(0, 4));\n\nexport const normalizeMovies = movies => {\n\treturn movies.map(\n\t\t({\n\t\t\tgenres = null,\n\t\t\tgenre_ids = null,\n\t\t\tid,\n\t\t\toriginal_title,\n\t\t\tname,\n\t\t\toverview,\n\t\t\tpopularity,\n\t\t\tposter_path,\n\t\t\trelease_date,\n\t\t\tvote_average,\n\t\t\tvote_count,\n\t\t}) => ({\n\t\t\tgenre: genre_ids\n\t\t\t\t? getGenreArray(genre_ids)\n\t\t\t\t: getGenreArrayLibrary(genres),\n\t\t\tid: id,\n\t\t\ttitle: original_title ? original_title : name,\n\t\t\tabout: overview,\n\t\t\tpopularity: popularity,\n\t\t\timg: getImgPath(poster_path),\n\t\t\treleaseDate: release_date ? getDate(release_date) : '',\n\t\t\tvote: vote_average,\n\t\t\tvotes: vote_count,\n\t\t})\n\t);\n};\n\nexport const normalizeMoviesDetails = ({\n\tposter_path,\n\ttitle,\n\toriginal_title,\n\tvote_average,\n\toverview,\n\tgenres,\n\trelease_date,\n}) => {\n\treturn {\n\t\tgenre: getGenreArrayLibrary(genres),\n\t\ttitle: original_title ? original_title : title,\n\t\tabout: overview,\n\t\timg: getImgPath(poster_path),\n\t\treleaseDate: release_date ? getDate(release_date) : '',\n\t\tvote: vote_average,\n\t};\n};\n\n// adult: false\n// backdrop_path: \"/27Mj3rFYP3xqFy7lnz17vEd8Ms.jpg\"\n// belongs_to_collection: {id: 1005134, name: 'The Gray Man Collection', poster_path: null, backdrop_path: null}\n// budget: 200000000\n// genres: (2) [{…}, {…}]\n// homepage: \"https://www.netflix.com/title/81160697\"\n// id: 725201\n// imdb_id: \"tt1649418\"\n// original_language: \"en\"\n// original_title: \"The Gray Man\"\n// overview: \"When a shadowy CIA agent uncovers damning agency secrets, he's hunted across the globe by a sociopathic rogue operative who's put a bounty on his head.\"\n// popularity: 3842.08\n// poster_path: \"/8cXbitsS6dWQ5gfMTZdorpAAzEH.jpg\"\n// production_companies: (3) [{…}, {…}, {…}]\n// production_countries: (2) [{…}, {…}]\n// release_date: \"2022-07-13\"\n// revenue: 0\n// runtime: 128\n// spoken_languages: (5) [{…}, {…}, {…}, {…}, {…}]\n// status: \"Released\"\n// tagline: \"\"\n// title: \"The Gray Man\"\n// video: false\n// vote_average: 7.011\n// vote_count: 1040\n","import axios from 'axios';\nimport {\n\tnormalizeMovies,\n\tnormalizeMoviesDetails,\n} from '../helpers/normalization-obj';\n\nconst API_KEY = '7cb8097836a7a1f4e5c19953961668c8';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n\tapi_key: API_KEY,\n\tinclude_adult: false,\n\tlanguage: 'en-US',\n};\n\nexport const fetchTrendingMovies = async () => {\n\tconst { data } = await axios.get(`/trending/all/day?`);\n\tconst response = normalizeMovies(data.results);\n\treturn response;\n};\n\nexport const fetchMoviesById = async id => {\n\tconst { data } = await axios.get(`/movie/${id}?`);\n\tconst response = normalizeMoviesDetails(data);\n\treturn response;\n};\n\nexport const fetchMoviesBySearch = async query => {\n\tconst { data } = await axios.get(`/search/movie?query=${query}&page=1`);\n\tconst response = normalizeMovies(data.results);\n\treturn response;\n};\n\nexport const fetchMoviesCredits = async id => {\n\tconst { data } = await axios.get(`/movie/${id}/credits?`);\n\treturn data.cast;\n};\n\nexport const fetchMoviesReviews = async id => {\n\tconst { data } = await axios.get(`/movie/${id}/reviews?`);\n\treturn data.results;\n};\n\n// export default fetchMoviesBySearch;\n\n// adult: false\n// backdrop_path: \"/vsHD4yu6eHTXfYBLyRRiuQIJmJe.jpg\"\n// genre_ids: [35]\n// id: 838330\n// media_type: \"movie\"\n// original_language: \"en\"\n// original_title: \"Not Okay\"\n// overview: \"An ambitious young woman, desperate for followers and fame, fakes a trip to Paris to up her social media presence. When a terrifying incident takes place in the real world and becomes part of her imaginary trip, her white lie becomes a moral quandary that offers her all the attention she’s wanted.\"\n// popularity: 111.892\n// poster_path: \"/x1q3FkqFHBkMeKnHiS6GYgdLvUs.jpg\"\n// release_date: \"2022-07-29\"\n// title: \"Not Okay\"\n// video: false\n// vote_average: 7.1\n// vote_count: 50\n\n// genre:\n//   id:\n//   title:\n//   about:\n//   popularity:\n//   img:\n//   releaseDate:\n//   vote:\n//   votes:\n"],"names":["Container","styled","ListCost","ItemCost","Data","useState","credits","setCredits","movieId","useParams","useEffect","getCast","fetchMoviesCredits","Number","response","console","log","message","length","map","name","profile_path","character","id","img","getImgPath","src","alt","getGenreArray","genre_ids","el","genreList","join","getGenreArrayLibrary","genres","imgPath","noImg","getDate","date","slice","normalizeMovies","movies","original_title","overview","popularity","poster_path","release_date","vote_average","vote_count","genre","title","about","releaseDate","vote","votes","normalizeMoviesDetails","axios","api_key","include_adult","language","fetchTrendingMovies","data","results","fetchMoviesById","fetchMoviesBySearch","query","cast","fetchMoviesReviews"],"sourceRoot":""}