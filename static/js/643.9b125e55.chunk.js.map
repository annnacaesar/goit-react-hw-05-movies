{"version":3,"file":"static/js/643.9b125e55.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","helpers/genreList.js","helpers/normalization-obj.js","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/api-service.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Title = styled.h2`\n\tmargin-bottom: 30px;\n\tmargin-top: 30px;\n\tfont-size: 36px;\n\ttext-align: center;\n`;\n\nexport const List = styled.ul`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tlist-style: none;\n\tmargin: 0;\n\tpadding: 0;\n\tgap: 15px 15px;\n`;\n\nexport const Item = styled(Link)`\n\twidth: 100%;\n\tflex-basis: calc(100% / 5 - 15px);\n\tpadding: 5px;\n\tcolor: var(--font-colo);\n\tbackground: #fbf9fa3f;\n\tfont-size: 18px;\n\tborder-radius: 5px;\n\t& img {\n\t\twidth: 100%;\n\t}\n`;\n","import { List, Item } from './MoviesList.styled';\nimport { useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ movies }) => {\n\tconst location = useLocation();\n\n\treturn (\n\t\t<List>\n\t\t\t{movies &&\n\t\t\t\tmovies.map(({ id, img, title }) => (\n\t\t\t\t\t<Item\n\t\t\t\t\t\tto={`/movies/${id}`}\n\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\tstate={{ from: location }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<img src={img} alt={title} />\n\t\t\t\t\t\t<h3>{title}</h3>\n\t\t\t\t\t</Item>\n\t\t\t\t))}\n\t\t</List>\n\t);\n};\n\nexport default MoviesList;\n","export const obj = {\n  28: \"Action\",\n  12: \"Adventure\",\n  16: \"Animation\",\n  35: \"Comedy\",\n  80: \"Crime\",\n  99: \"Documentary\",\n  18: \"Drama\",\n  10751: \"Family\",\n  14: \"Fantasy\",\n  36: \"History\",\n  27: \"Horror\",\n  10402: \"Music\",\n  9648: \"Mystery\",\n  10749: \"Romance\",\n  878: \"Science Fiction\",\n  10770: \"TV Movie\",\n  53: \"Thriller\",\n  10752: \"War\",\n  37: \"Western\",\n};\n\nexport default obj;","import genreList from './genreList';\nimport noImg from '../images/No_image_available.png';\n\nconst getGenreArray = genre_ids =>\n\tgenre_ids.map(el => genreList[`${el}`]).join(', ');\nconst getGenreArrayLibrary = genres => genres.map(el => el.name).join(', ');\n\nexport const getImgPath = imgPath =>\n\t!imgPath ? `${noImg}` : `https://image.tmdb.org/t/p/w500/${imgPath}`;\n\nconst getDate = date => (!date ? date : date.slice(0, 4));\n\nexport const normalizeMovies = movies => {\n\treturn movies.map(\n\t\t({\n\t\t\tgenres = null,\n\t\t\tgenre_ids = null,\n\t\t\tid,\n\t\t\toriginal_title,\n\t\t\tname,\n\t\t\toverview,\n\t\t\tpopularity,\n\t\t\tposter_path,\n\t\t\trelease_date,\n\t\t\tvote_average,\n\t\t\tvote_count,\n\t\t}) => ({\n\t\t\tgenre: genre_ids\n\t\t\t\t? getGenreArray(genre_ids)\n\t\t\t\t: getGenreArrayLibrary(genres),\n\t\t\tid: id,\n\t\t\ttitle: original_title ? original_title : name,\n\t\t\tabout: overview,\n\t\t\tpopularity: popularity,\n\t\t\timg: getImgPath(poster_path),\n\t\t\treleaseDate: release_date ? getDate(release_date) : '',\n\t\t\tvote: vote_average,\n\t\t\tvotes: vote_count,\n\t\t})\n\t);\n};\n\nexport const normalizeMoviesDetails = ({\n\tposter_path,\n\ttitle,\n\toriginal_title,\n\tvote_average,\n\toverview,\n\tgenres,\n\trelease_date,\n}) => {\n\treturn {\n\t\tgenre: getGenreArrayLibrary(genres),\n\t\ttitle: original_title ? original_title : title,\n\t\tabout: overview,\n\t\timg: getImgPath(poster_path),\n\t\treleaseDate: release_date ? getDate(release_date) : '',\n\t\tvote: vote_average,\n\t};\n};\n\n// adult: false\n// backdrop_path: \"/27Mj3rFYP3xqFy7lnz17vEd8Ms.jpg\"\n// belongs_to_collection: {id: 1005134, name: 'The Gray Man Collection', poster_path: null, backdrop_path: null}\n// budget: 200000000\n// genres: (2) [{…}, {…}]\n// homepage: \"https://www.netflix.com/title/81160697\"\n// id: 725201\n// imdb_id: \"tt1649418\"\n// original_language: \"en\"\n// original_title: \"The Gray Man\"\n// overview: \"When a shadowy CIA agent uncovers damning agency secrets, he's hunted across the globe by a sociopathic rogue operative who's put a bounty on his head.\"\n// popularity: 3842.08\n// poster_path: \"/8cXbitsS6dWQ5gfMTZdorpAAzEH.jpg\"\n// production_companies: (3) [{…}, {…}, {…}]\n// production_countries: (2) [{…}, {…}]\n// release_date: \"2022-07-13\"\n// revenue: 0\n// runtime: 128\n// spoken_languages: (5) [{…}, {…}, {…}, {…}, {…}]\n// status: \"Released\"\n// tagline: \"\"\n// title: \"The Gray Man\"\n// video: false\n// vote_average: 7.011\n// vote_count: 1040\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n\tmargin-bottom: 30px;\n\tmargin-top: 30px;\n\tfont-size: 36px;\n\ttext-align: center;\n`;\n","import { useState, useEffect} from 'react';\nimport { Title } from './Home.styled';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { fetchTrendingMovies } from '../../services/api-service';\n\nconst Home = () => {\n\tconst [movies, setMovies] = useState([]);\n\n\tuseEffect(() => {\n\t\tconst fetchCountries = async () => {\n\t\t\ttry {\n\t\t\t\tconst movies = await fetchTrendingMovies();\n\t\t\t\tsetMovies(movies);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error.message);\n\t\t\t}\n\t\t};\n\t\tfetchCountries();\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t<Title>Trending movies</Title>\n\t\t\t<MoviesList movies={movies} />\n\t\t</>\n\t);\n};\n\nexport default Home;\n","import axios from 'axios';\nimport {\n\tnormalizeMovies,\n\tnormalizeMoviesDetails,\n} from '../helpers/normalization-obj';\n\nconst API_KEY = '7cb8097836a7a1f4e5c19953961668c8';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n\tapi_key: API_KEY,\n\tinclude_adult: false,\n\tlanguage: 'en-US',\n};\n\nexport const fetchTrendingMovies = async () => {\n\tconst { data } = await axios.get(`/trending/all/day?`);\n\tconst response = normalizeMovies(data.results);\n\treturn response;\n};\n\nexport const fetchMoviesById = async id => {\n\tconst { data } = await axios.get(`/movie/${id}?`);\n\tconst response = normalizeMoviesDetails(data);\n\treturn response;\n};\n\nexport const fetchMoviesBySearch = async query => {\n\tconst { data } = await axios.get(`/search/movie?query=${query}&page=1`);\n\tconst response = normalizeMovies(data.results);\n\treturn response;\n};\n\nexport const fetchMoviesCredits = async id => {\n\tconst { data } = await axios.get(`/movie/${id}/credits?`);\n\treturn data.cast;\n};\n\nexport const fetchMoviesReviews = async id => {\n\tconst { data } = await axios.get(`/movie/${id}/reviews?`);\n\treturn data.results;\n};\n\n// export default fetchMoviesBySearch;\n\n// adult: false\n// backdrop_path: \"/vsHD4yu6eHTXfYBLyRRiuQIJmJe.jpg\"\n// genre_ids: [35]\n// id: 838330\n// media_type: \"movie\"\n// original_language: \"en\"\n// original_title: \"Not Okay\"\n// overview: \"An ambitious young woman, desperate for followers and fame, fakes a trip to Paris to up her social media presence. When a terrifying incident takes place in the real world and becomes part of her imaginary trip, her white lie becomes a moral quandary that offers her all the attention she’s wanted.\"\n// popularity: 111.892\n// poster_path: \"/x1q3FkqFHBkMeKnHiS6GYgdLvUs.jpg\"\n// release_date: \"2022-07-29\"\n// title: \"Not Okay\"\n// video: false\n// vote_average: 7.1\n// vote_count: 50\n\n// genre:\n//   id:\n//   title:\n//   about:\n//   popularity:\n//   img:\n//   releaseDate:\n//   vote:\n//   votes:\n"],"names":["List","styled","Item","Link","movies","location","useLocation","map","id","img","title","to","state","from","src","alt","getGenreArray","genre_ids","el","genreList","join","getGenreArrayLibrary","genres","name","getImgPath","imgPath","noImg","getDate","date","slice","normalizeMovies","original_title","overview","popularity","poster_path","release_date","vote_average","vote_count","genre","about","releaseDate","vote","votes","normalizeMoviesDetails","Title","useState","setMovies","useEffect","fetchCountries","fetchTrendingMovies","console","log","message","MoviesList","axios","api_key","include_adult","language","data","response","results","fetchMoviesById","fetchMoviesBySearch","query","fetchMoviesCredits","cast","fetchMoviesReviews"],"sourceRoot":""}